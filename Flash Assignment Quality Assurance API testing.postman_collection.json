{
	"info": {
		"_postman_id": "b2783f3e-37c4-4a4e-b01a-41865bfe0e2f",
		"name": "Flash Assignment Quality Assurance API testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "27058308"
	},
	"item": [
		{
			"name": "Test Breeds Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Array length should be 1\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://catfact.ninja/breeds?limit=1",
					"protocol": "https",
					"host": [
						"catfact",
						"ninja"
					],
					"path": [
						"breeds"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test Random Cat Fact Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"pm.test(\"Fact should be a string\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.fact).to.be.a('string');\r",
							"});\r",
							"\r",
							"pm.test(\"Fact length should not exceed max_length\", function () {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.fact.length).to.be.at.most(140);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://catfact.ninja/fact?max_length=140",
					"protocol": "https",
					"host": [
						"catfact",
						"ninja"
					],
					"path": [
						"fact"
					],
					"query": [
						{
							"key": "max_length",
							"value": "140"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Test List of Cat Facts Endpoint",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be JSON\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"});\r",
							"\r",
							"pm.test(\"Response should be an array\", function () {\r",
							"    pm.response.to.have.jsonBody();\r",
							"    pm.expect(pm.response.json()).to.be.an('array');\r",
							"});\r",
							"\r",
							"pm.test(\"Array length should be 1\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.lengthOf(1);\r",
							"});\r",
							"\r",
							"pm.test(\"Each fact should be a string and not exceed max_length\", function () {\r",
							"    var facts = pm.response.json();\r",
							"    facts.forEach(fact => {\r",
							"        pm.expect(fact.fact).to.be.a('string');\r",
							"        pm.expect(fact.fact.length).to.be.at.most(140);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "https://catfact.ninja/facts?limit=1&max_length=140",
					"protocol": "https",
					"host": [
						"catfact",
						"ninja"
					],
					"path": [
						"facts"
					],
					"query": [
						{
							"key": "limit",
							"value": "1"
						},
						{
							"key": "max_length",
							"value": "140"
						}
					]
				}
			},
			"response": []
		}
	]
}